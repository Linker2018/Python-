from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, filters, ConversationHandler, JobQueue
)
from telegram import BotCommand
from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    JobQueue
)
import pytz
from datetime import time
import logging
import os
from dotenv import load_dotenv
from gspread.exceptions import APIError
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime, timedelta, time
import pytz
import requests
import logging
import telegram.error
ADMIN_IDS = [552553015]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram user_id –∞–¥–º–∏–Ω–æ–≤
ADMIN_ID = [552553015]

logging.basicConfig(level=logging.INFO)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/spreadsheets",
         "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]
creds = Credentials.from_service_account_file("tg-bot-457119-fb7b4775dfe6.json", scopes=scope)
client = gspread.authorize(creds)
sheet = client.open("Bot").sheet1
settings_sheet = client.open("Bot").worksheet("Settings")
staking_sheet = client.open("Bot").worksheet("Staking")

SELECT_CURRENCY, INPUT_AMOUNT, WAITING_PHOTO = range(3)
STAKING_PERIODS = {1: 60, 3: 80, 6: 100, 12: 120}
REFERRAL_PERCENTS = {
    'deposit': [0.05, 0.02, 0.01],  # 5%, 2%, 1% –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    'staking': [0.05, 0.02, 0.01]    # 5%, 2%, 1% –∑–∞ —Å—Ç–µ–π–∫–∏–Ω–≥
}


def append_transaction(sheet, transaction_data: dict):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É"""
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å—Ç–æ–ª–±—Ü–æ–≤
        row_data = [
            transaction_data.get('user_id', ''),
            transaction_data.get('balance', 0),
            transaction_data.get('currency', 'STB'),
            transaction_data.get('amount', 0),
            transaction_data.get('timestamp', datetime.now().strftime("%Y-%m-%d %H:%M:%S")),
            transaction_data.get('status', ''),
            transaction_data.get('Address/Photo', ''),
            transaction_data.get('username', ''),
            transaction_data.get('tx_type', '')
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
        sheet.append_row(row_data)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        return False

def get_stb_rate():
    try:
        return float(settings_sheet.acell("J1").value)
    except:
        return 1.0


def get_balance(user_id):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –≤ –æ–¥–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ"""
    records = sheet.get_all_records()
    balance = 0.0

    for row in records:
        if str(row.get('user_id')) != str(user_id):
            continue

        try:
            amount = float(str(row.get('amount', '0')).replace(',', '.'))
            status = str(row.get('status', ''))

            if status in ['–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –ø–æ —Å—Ç–µ–π–∫–∏–Ω–≥—É', '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–µ–π–∫–∏–Ω–≥–∞','–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ —Å—Ç–µ–π–∫–∏–Ω–≥', '–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥', '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å 1 —É—Ä–æ–≤–Ω—è', '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å 2 —É—Ä–æ–≤–Ω—è','–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å 3 —É—Ä–æ–≤–Ω—è']:
                balance += amount

        except ValueError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ: {row}")
            continue

    return round(max(0, balance), 2)


def get_user_history(user_id):
    records = sheet.get_all_records()
    history = []
    for row in records:
        if str(row.get('user_id')) == str(user_id):
            time = row.get('timestamp', '‚Äî')
            currency = row.get('currency', '-')
            amount = row.get('amount', '-')
            status = row.get('status', '-')
            history.append(f"{time}: {amount} {currency} ({status})")
    return history


async def process_stakes(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ daily_profit –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å—Ç–µ–π–∫–∏–Ω–≥–æ–≤"""
    try:
        tz = pytz.timezone("Europe/Kyiv")
        current_datetime = datetime.now(tz)
        current_date = current_datetime.date()

        records = staking_sheet.get_all_records()

        for idx, row in enumerate(records, start=2):
            if row.get('status') != '–ê–∫—Ç–∏–≤–µ–Ω':
                continue

            try:
                user_id = row['user_id']
                username = row.get('username', '')
                amount = float(row['amount'])
                daily_profit = float(row.get('daily_profit', 0))
                earned = float(row.get('earned', 0))

                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
                end_date = datetime.strptime(row['end_date'], "%Y-%m-%d %H:%M:%S").replace(tzinfo=tz)
                end_date_date = end_date.date()  # –î–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

                if current_date >= end_date_date:
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–µ–π–∫–∏–Ω–≥
                    staking_sheet.update_cell(idx, 8, '–ó–∞–≤–µ—Ä—à–µ–Ω')

                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—É–º–º—É + –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥
                    total_to_return = amount + earned
                    new_balance = round(get_balance(user_id) + total_to_return, 2)

                    sheet.append_row([
                        user_id,
                        new_balance,
                        'STB',
                        total_to_return,
                        current_datetime.strftime("%Y-%m-%d %H:%M:%S"),
                        '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–µ–π–∫–∏–Ω–≥–∞',
                        '',
                        username
                    ])

                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"üéâ –°—Ç–µ–π–∫–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
                                 f"‚Ä¢ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: {amount} STB\n"
                                 f"‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {earned:.6f} STB\n"
                                 f"‚Ä¢ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} STB"
                        )
                    except Exception as e:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

                else:
                    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
                    new_earned = round(earned + daily_profit, 6)
                    staking_sheet.update_cell(idx, 9, new_earned)

                    sheet.append_row([
                        user_id,
                        round(get_balance(user_id) + daily_profit, 2),
                        'STB',
                        daily_profit,
                        current_datetime.strftime("%Y-%m-%d %H:%M:%S"),
                        '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –ø–æ —Å—Ç–µ–π–∫–∏–Ω–≥—É',
                        '',
                        username
                    ])

                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"‚ûï –ù–∞—á–∏—Å–ª–µ–Ω–æ {daily_profit:.6f} STB\n"
                                 f"–¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥: {new_earned:.6f} STB\n"
                                 f"–ë–∞–ª–∞–Ω—Å: {round(get_balance(user_id), 2)} STB"
                        )
                    except Exception as e:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –≤ —Å—Ç—Ä–æ–∫–µ {idx}: {e}")
                continue

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ process_stakes: {e}", exc_info=True)


async def input_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "NoUsername"
    text = update.message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
    if context.user_data.get("awaiting_address"):
        if not text:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞")
            return INPUT_AMOUNT

        address = text
        amount = context.user_data.get("withdraw_amount")

        if amount is None:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ConversationHandler.END

        try:
            amount = float(amount)
            balance = get_balance(user_id)

            if amount > balance:
                await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞")
                return INPUT_AMOUNT

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            sheet.append_row([
                user_id,
                round(balance - amount, 2),
                "STB",
                -amount,
                timestamp,
                "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥",
                address,
                username
            ])

            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop("awaiting_address", None)
            context.user_data.pop("withdraw_amount", None)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            keyboard = [[InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='home')]]
            await update.message.reply_text(
                f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount} STB –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\n"
                f"üì≠ –ê–¥—Ä–µ—Å: {address}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

            return ConversationHandler.END
        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
            return INPUT_AMOUNT

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥
    if context.user_data.get("awaiting_withdraw"):
        if not text.isdigit():
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –¥—Ä–æ–±–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞.")
            return INPUT_AMOUNT

        try:
            amount = float(text)
            balance = get_balance(user_id)

            if amount > balance:
                await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
                return INPUT_AMOUNT

            context.user_data["withdraw_amount"] = amount
            context.user_data["awaiting_address"] = True
            context.user_data.pop("awaiting_withdraw", None)

            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.")
            return INPUT_AMOUNT
        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
            return INPUT_AMOUNT

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞
    if 'stake_period' in context.user_data:
        if not text.isdigit():
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏.")
            return INPUT_AMOUNT

        try:
            amount = float(text)
            balance = get_balance(user_id)

            if amount > balance:
                await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞.")
                return INPUT_AMOUNT

            period = context.user_data['stake_period']
            percent = STAKING_PERIODS[period]
            year_profit = round(amount * (percent / 100), 2)
            daily_profit = round(year_profit / 365, 6)
            total_profit = round((period * 30) * daily_profit, 2)

            context.user_data['stake_confirm'] = {
                'amount': amount,
                'period': period,
                'percent': percent,
                'daily_profit': daily_profit,
                'total_profit': total_profit
            }

            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_stake')],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_stake')]
            ]

            await update.message.reply_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–µ–π–∫–∏–Ω–≥ –Ω–∞ {period} –º–µ—Å.\n"
                f"–°—É–º–º–∞: {amount} STB\n"
                f"–ì–æ–¥–æ–≤–æ–π %: {percent}%\n"
                f"–î–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å: {daily_profit} STB\n"
                f"–û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_profit} STB\n\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

            context.user_data.pop('stake_period', None)
            return INPUT_AMOUNT
        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
            return INPUT_AMOUNT

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    if not text.isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏.")
        return INPUT_AMOUNT

    try:
        amount = float(text)
        currency = context.user_data.get('currency', 'STB')

        if currency == 'USDT':
            stb_rate = get_stb_rate()
            converted = round(amount * stb_rate, 2)
        else:
            converted = amount

        context.user_data['amount'] = amount
        context.user_data['converted_amount'] = converted
        context.user_data['raw_amount'] = amount

        await update.message.reply_text(f"`136582964520750`", parse_mode='Markdown')
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ {currency} –Ω–∞ —Å—É–º–º—É {amount}. "
            f"–≠—Ç–æ –±—É–¥–µ—Ç –∑–∞—á—Ç–µ–Ω–æ –∫–∞–∫ ~{converted} STB. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç/—Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."
        )

        return WAITING_PHOTO
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
        return INPUT_AMOUNT


def save_transaction(user_id, username, currency, amount, timestamp, status, photo_url, raw_amount=None):
    balance = round(get_balance(user_id) + amount, 2)
    sheet.append_row([
        user_id, balance, "STB", round(amount, 2), timestamp, status, photo_url, username
    ])

GROUP_ID = "-1002259609574"
async def receive_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not update.message or not update.message.photo:
            await update.message.reply_text("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            return

        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        user = update.message.from_user
        amount = context.user_data.get('converted_amount')

        if not amount:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
            return

        # 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        username = user.username or f"id{user.id}"
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # 3. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
        try:
            row_data = [
                user.id,
                get_balance(user.id),
                context.user_data['currency'],
                amount,
                current_time,
                "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏",
                f"https://t.me/{username}" if user.username else "",
                username,
                context.user_data.get('raw_amount', amount)
            ]
            sheet.append_row(row_data)
            row_count = len(sheet.get_all_values())
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —á–∞—Ç–∞)
        try:
            ADMIN_ID = 552553015  # –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID

            # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏

            admin_msg = await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{row_count}\n"
                     f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user.id})\n"
                     f"üí∞ –°—É–º–º–∞: {amount} STB\n"
                     f"üí± –í–∞–ª—é—Ç–∞: {context.user_data['currency']}\n"
                     f"‚è∞ –í—Ä–µ–º—è: {current_time}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{row_count}"),
                     InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{row_count}")]
                ])
            )

            # –§–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await context.bot.send_photo(
                chat_id=ADMIN_ID,
                photo=photo.file_id,
                caption=f"–§–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{row_count}",
                reply_to_message_id=admin_msg.message_id
            )

            await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É
            group_message = await context.bot.send_message(
                chat_id=GROUP_ID,
                text=f"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{row_count}\n"
                     f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user.id})\n"
                     f"üí∞ –°—É–º–º–∞: {amount} STB\n"
                     f"üí± –í–∞–ª—é—Ç–∞: {context.user_data['currency']}\n"
                     f"‚è∞ –í—Ä–µ–º—è: {current_time}",

            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø—É
            await context.bot.send_photo(
                chat_id=GROUP_ID,
                photo=photo.file_id,
                caption=f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞—è–≤–∫–∏ #{row_count}",
                reply_to_message_id=group_message.message_id
            )

        except telegram.error.BadRequest as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ receive_photo: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏")


def save_referral(user_id, username, referrer_id, referrer_username):
    try:
        referral_sheet = client.open("Bot").worksheet("Referrals")
        existing = referral_sheet.get_all_records()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        for row in existing:
            if str(row['user_id']) == str(user_id):
                return False

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        referral_sheet.append_row([
            user_id,
            username,
            referrer_id,
            referrer_username,
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        ])
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):

    context.user_data.clear()

    user = update.effective_user
    username = user.username or f"id{user.id}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'id12345' –µ—Å–ª–∏ username –Ω–µ—Ç

    if update.message and update.message.text.startswith("/start ref"):
        referrer_id = update.message.text.split("ref")[-1]
        save_referral(user.id, username, referrer_id, "")


    keyboard = [
        [
            InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='balance'),
            InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data='about')
        ],
        [
            InlineKeyboardButton("üë• –†–µ—Ñ –°—Å—ã–ª–∫–∞", callback_data='ref'),
            InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∏", callback_data='links')
        ],
        [
            InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data='history')
        ]

    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = update.message or update.callback_query.message
    user_id = message.from_user.id
    username = message.from_user.username or "NoUsername"

    if update.message and update.message.text.startswith("/start ref"):
        referrer_id = update.message.text.split("ref")[-1]
        try:
            referrer_user = await context.bot.get_chat(referrer_id)
            referrer_username = referrer_user.username or "NoUsername"
            save_referral(update.effective_user.id,
                         update.effective_user.username or "NoUsername",
                         referrer_id,
                         referrer_username)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {e}")

    await message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)


async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == 'balance':
        try:
            balance = get_balance(user_id)
            frozen = 0
            active_stakes = []

            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            for stake in staking_sheet.get_all_records():
                if str(stake.get('user_id')) == str(user_id) and stake.get('status') == '–ê–∫—Ç–∏–≤–µ–Ω':
                    frozen += float(stake['amount'])
                    active_stakes.append(
                        f"‚Ä¢ {stake['amount']} STB ({stake['period']} –º–µ—Å.) ‚Üí {stake['daily_profit']:.6f} STB/–¥–µ–Ω—å"
                    )

            # –ó–∞—Ç–µ–º —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [
                    InlineKeyboardButton("‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='top_up'),
                    InlineKeyboardButton("üì• –°—Ç–µ–π–∫–∏–Ω–≥", callback_data='staking')
                ],
                [
                    InlineKeyboardButton("üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data='withdraw'),
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='home')
                ]
            ]

            message = (
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{balance:.2f} STB**\n"
                f"‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ –≤ —Å—Ç–µ–π–∫–∏–Ω–≥–µ: **{frozen:.2f} STB**\n\n"
            )
            message += "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–µ–π–∫–∏:\n" + "\n".join(active_stakes) if active_stakes else "üîπ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–µ–π–∫–æ–≤"

            await query.edit_message_text(text=message, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –±–∞–ª–∞–Ω—Å–µ: {e}")
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    elif query.data == 'top_up':

        keyboard = [
            [InlineKeyboardButton("USDT", callback_data='usdt'), InlineKeyboardButton("BST", callback_data='bst')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='home')]]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data in ['usdt', 'bst']:

        context.user_data['currency'] = query.data.upper()
        if context.user_data['currency'] == 'USDT':
            rate = get_stb_rate()
            context.user_data['stb_rate'] = rate
            await query.message.delete()
            await context.bot.send_message(chat_id=query.from_user.id, text=f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å STB: 1 USDT = {rate:.2f} STB –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ")
        else:
            await query.message.delete()
            await context.bot.send_message(chat_id=query.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")


    elif query.data == 'withdraw':

        balance = get_balance(user_id)
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='balance')]]
        if balance < 1:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            context.user_data['awaiting_withdraw'] = True
            await query.message.delete()
            await context.bot.send_message(chat_id=user_id, text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ STB:")

    elif query.data == 'staking':
        keyboard = [
            [InlineKeyboardButton("üìä –ú–æ–∏ —Å—Ç–µ–π–∫–∏", callback_data='my_stakes')],
            [InlineKeyboardButton("1 –º–µ—Å—è—Ü (60%)", callback_data='stake_1')],
            [InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ (80%)", callback_data='stake_3')],
            [InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ (100%)", callback_data='stake_6')],
            [InlineKeyboardButton("12 –º–µ—Å—è—Ü–µ–≤ (120%)", callback_data='stake_12')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='balance')]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Å—Ç–µ–π–∫–∏–Ω–≥–∞:", reply_markup=InlineKeyboardMarkup(keyboard))


    elif query.data.startswith("stake_"):
        period = int(query.data.split("_")[1])
        context.user_data['stake_period'] = period
        await context.bot.send_message(chat_id=query.from_user.id,text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞:")


        # –ø–µ—Ä–µ—Ö–æ–¥ –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    elif query.data == 'my_stakes':
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ —Å—Ç–µ–π–∫–∏–Ω–≥–∞—Ö
            all_stakes = staking_sheet.get_all_records()

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–µ–π–∫–∏–Ω–≥–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_stakes = [
                stake for stake in all_stakes
                if str(stake.get('user_id', '')) == str(user_id)
                   and stake.get('status', '').lower() == '–∞–∫—Ç–∏–≤–µ–Ω'
            ]

            # –ï—Å–ª–∏ —Å—Ç–µ–π–∫–∏–Ω–≥–æ–≤ –Ω–µ—Ç
            if not user_stakes:
                await query.edit_message_text(
                    "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–µ–π–∫–∏–Ω–≥–æ–≤.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='staking')]
                    ])
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–µ–π–∫–∏–Ω–≥–æ–≤
            message_lines = []
            for stake in user_stakes:
                try:
                    amount = stake.get('amount', '0')
                    period = stake.get('period', '?')
                    end_date_str = stake.get('end_date', '')
                    daily_profit = stake.get('daily_profit', '0')
                    earned = stake.get('earned', '0')

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
                    if end_date_str:
                        try:
                            end_date = datetime.strptime(end_date_str, "%Y-%m-%d %H:%M:%S")
                            days_left = (end_date - datetime.now()).days
                            date_info = f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}"
                        except ValueError:
                            date_info = "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
                    else:
                        date_info = "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

                    message_lines.append(
                        f"‚Ä¢ {amount} STB –Ω–∞ {period} –º–µ—Å.\n"
                        f"  –î–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å: {daily_profit} STB\n"
                        f"  –ù–∞—á–∏—Å–ª–µ–Ω–æ: {earned} STB\n"
                        f"  {date_info}\n"
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–µ–π–∫–∏–Ω–≥–∞: {e}")
                    continue

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await query.edit_message_text(
                "üìä –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–µ–π–∫–∏–Ω–≥–∏:\n\n" + "\n".join(message_lines),
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='staking')]
                ])
            )

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ my_stakes: {e}")
            await query.edit_message_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–µ–π–∫–∏–Ω–≥–∞—Ö",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='staking')]
                ])
            )

    elif query.data == 'confirm_stake':
        data = context.user_data.get('stake_confirm')
        if not data:
            await query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞.")
            return ConversationHandler.END

        user_id = query.from_user.id
        username = query.from_user.username or "NoUsername"
        amount = data['amount']
        period = data['period']
        percent = data['percent']
        daily_profit = data['daily_profit']

        kyiv_tz = pytz.timezone("Europe/Kyiv")
        start_date = datetime.now(kyiv_tz)
        end_date = start_date + timedelta(days=period * 30)


        staking_sheet.append_row([
            user_id,
            username,
            amount,
            period,
            percent,
            start_date.strftime("%Y-%m-%d %H:%M:%S"),
            end_date.strftime("%Y-%m-%d %H:%M:%S"),
            "–ê–∫—Ç–∏–≤–µ–Ω",
            0,  # earned
            daily_profit
        ])
        current_balance = get_balance(user_id)
        sheet.append_row([
            user_id,
            round(current_balance - amount, 2),  # –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            "STB",
            -amount,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ —Å—Ç–µ–π–∫–∏–Ω–≥",
            "",
            username
        ])

        await process_referral_bonuses(context, user_id, amount, 'staking')
        await query.edit_message_text(f"‚úÖ –°—Ç–µ–π–∫–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {period} –º–µ—Å.\n"f"–°—É–º–º–∞: {amount} STB\n"f"–ì–æ–¥–æ–≤–æ–π %: {percent}%\n"f"–î–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å: {daily_profit} STB\n"f"–î–æ: {end_date.strftime('%d.%m.%Y')}"
        )
        return ConversationHandler.END

    elif query.data == 'cancel_stake':
        await query.edit_message_text("–°—Ç–µ–π–∫–∏–Ω–≥ –æ—Ç–º–µ–Ω—ë–Ω.")
        context.user_data.pop('stake_confirm', None)
        return ConversationHandler.END

    elif query.data == 'home':
            await start(update, context)

    elif query.data == 'about':
        keyboard = [
            [InlineKeyboardButton("üåê –ù–∞—à —Å–∞–π—Ç", url='https://t.me/+pZNJWmKkq5tmNDdk')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='home')]
        ]
        await query.edit_message_text("–ú—ã –∫–æ–º–ø–∞–Ω–∏—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è ...", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'ref':
        await show_referral_info(update, context)

    elif query.data == 'ref_stats':
        await show_referral_stats(update, context)
    elif query.data == 'refresh_ref_stats':
        await show_referral_stats(update, context)

    elif query.data == 'links':
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='home')]]
            await query.edit_message_text("–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: ...", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'history':
            history = get_user_history(user_id)
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='home')]]
            if not history:
                await query.edit_message_text("–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞.", reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                await query.edit_message_text(
                    "–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:\n\n" + "\n".join(history[-10:]),
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
    elif query.data == 'admin_users':
        records = sheet.get_all_records()
        users = set()
        for row in records:
            user_id = row.get('user_id')
            if user_id:
                users.add(user_id)
        await query.edit_message_text(
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='home')]])
        )

    elif query.data == 'admin_requests':
        records = sheet.get_all_records()
        pending = [(i + 2, row) for i, row in enumerate(records) if row['status'] == '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è']
        if not pending:
                await query.edit_message_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.")
        else:
            messages = []
            keyboard = []
            for idx, row in pending[-5:]:
                user = row.get('username', '-')
                amount = row.get('amount', '-')
                currency = row.get('currency', '-')
                date = row.get('timestamp', '-')
                text = f"{user} ‚Äî {amount} {currency} ({date})"
                messages.append(text)
                keyboard.append([
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{idx}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{idx}")
                ])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='home')])
            await query.edit_message_text("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:\n\n" + "\n\n".join(messages),reply_markup=InlineKeyboardMarkup(keyboard))


    elif query.data.startswith("approve_"):
        row_index = int(query.data.split("_")[1])
        sheet.update_cell(row_index, 6, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
        user_id_cell = sheet.cell(row_index, 1).value
        try:
            user_id = int(user_id_cell)
            await context.bot.send_message(chat_id=user_id, text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")
        except:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await query.edit_message_text("–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")

    elif query.data.startswith("reject_"):
        row_index = int(query.data.split("_")[1])
        sheet.update_cell(row_index, 6, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        user_id_cell = sheet.cell(row_index, 1).value
        try:
            user_id = int(user_id_cell)
            await context.bot.send_message(chat_id=user_id, text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå")
        except:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await query.edit_message_text("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå")


ADMIN_IDS = [552553015]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram user_id –∞–¥–º–∏–Ω–æ–≤


async def handle_admin_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback

    try:
        action, row_index = query.data.split('_')
        row_index = int(row_index)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = "–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ" if action == "approve" else "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå"
        sheet_status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ" if action == "approve" else "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Google Sheets
        sheet.update_cell(row_index, 6, sheet_status)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        original_text = query.message.text

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        await query.edit_message_text(
            text=original_text,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            reply_markup=None  # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –û–¢–î–ï–õ–¨–ù–´–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∫–∞–∫ –æ—Ç–≤–µ—Ç
        await context.bot.send_message(
            chat_id=query.message.chat.id,
            text=status,
            reply_to_message_id=query.message.message_id
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_id = int(sheet.cell(row_index, 1).value)
            await context.bot.send_message(
                chat_id=user_id,
                text=f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ #{row_index}:\n{status}"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")
        try:
            await query.edit_message_reply_markup(reply_markup=None)
            await context.bot.send_message(
                chat_id=query.message.chat.id,
                text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                reply_to_message_id=query.message.message_id
            )
        except:
            pass


async def get_referral_link(bot, user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        if not hasattr(bot_info, 'username') or not bot_info.username:
            logging.error("–£ –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username")
            return "–û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç username"

        return f"https://t.me/{bot_info.username}?start=ref{user_id}"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
        return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏"


def save_referral_bonus(bonus_sheet, data: dict):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –≤ —Ç–∞–±–ª–∏—Ü—É"""
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å—Ç–æ–ª–±—Ü–æ–≤
        row_data = [
            data.get('user_id', ''),  # –ö—Ç–æ –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å
            data.get('referrer_id', ''),  # –û—Ç –∫–æ–≥–æ –ø—Ä–∏—à–µ–ª –±–æ–Ω—É—Å
            data.get('level', 1),  # –£—Ä–æ–≤–µ–Ω—å (1, 2, 3)
            data.get('amount', 0),  # –°—É–º–º–∞ –±–æ–Ω—É—Å–∞
            data.get('currency', 'STB'),  # –í–∞–ª—é—Ç–∞
            data.get('timestamp', datetime.now().strftime("%Y-%m-%d %H:%M:%S")),
            data.get('action_type', ''),  # –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (deposit/stacking)
            data.get('referred_username', '')  # –ò–º—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ
        ]

        bonus_sheet.append_row(row_data)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞: {e}")
        return False


async def show_referral_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        message = update.message or update.callback_query.message

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        referral_sheet = client.open("Bot").worksheet("Referrals")
        bonus_sheet = client.open("Bot").worksheet("ReferralBonuses")

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = {
            'total': 0,
            'by_level': {1: {'count': 0, 'bonus': 0, 'users': []},
                         2: {'count': 0, 'bonus': 0, 'users': []},
                         3: {'count': 0, 'bonus': 0, 'users': []}},
            'total_bonus': 0
        }

        # 1. –°—á–∏—Ç–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º
        all_referrals = referral_sheet.get_all_records()

        # –ü—Ä—è–º—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã (1 —É—Ä–æ–≤–µ–Ω—å)
        level1 = [r for r in all_referrals if str(r['referrer_id']) == str(user_id)]
        stats['by_level'][1]['count'] = len(level1)
        stats['by_level'][1]['users'] = [r['username'] for r in level1 if 'username' in r][:5]  # –ø–µ—Ä–≤—ã–µ 5

        # –†–µ—Ñ–µ—Ä–∞–ª—ã 2 —É—Ä–æ–≤–Ω—è
        level2 = []
        for ref in level1:
            level2 += [r for r in all_referrals if str(r['referrer_id']) == str(ref['user_id'])]
        stats['by_level'][2]['count'] = len(level2)
        stats['by_level'][2]['users'] = [r['username'] for r in level2 if 'username' in r][:5]

        # –†–µ—Ñ–µ—Ä–∞–ª—ã 3 —É—Ä–æ–≤–Ω—è
        level3 = []
        for ref in level2:
            level3 += [r for r in all_referrals if str(r['referrer_id']) == str(ref['user_id'])]
        stats['by_level'][3]['count'] = len(level3)
        stats['by_level'][3]['users'] = [r['username'] for r in level3 if 'username' in r][:5]

        stats['total'] = sum(level['count'] for level in stats['by_level'].values())

        # 2. –°—á–∏—Ç–∞–µ–º –±–æ–Ω—É—Å—ã
        all_bonuses = bonus_sheet.get_all_records()
        for bonus in all_bonuses:
            if str(bonus['user_id']) == str(user_id):
                level = int(bonus.get('level', 1))
                if level in stats['by_level']:
                    stats['by_level'][level]['bonus'] += float(bonus.get('amount', 0))
                    stats['total_bonus'] += float(bonus.get('amount', 0))

        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = "üìä *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        msg += f"üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{stats['total']}*\n"
        msg += f"üí∞ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{round(stats['total_bonus'], 2)} STB*\n\n"

        for level in [1, 2, 3]:
            percent = [5, 2, 1][level - 1]
            msg += (
                f"*{level} —É—Ä–æ–≤–µ–Ω—å* ({percent}%):\n"
                f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats['by_level'][level]['count']}\n"
                f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {round(stats['by_level'][level]['bonus'], 2)} STB\n"
            )

            if stats['by_level'][level]['users']:
                msg += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ: @{' @'.join(stats['by_level'][level]['users'])}\n"

            msg += "\n"

        # 4. –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='ref_stats'),
             InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='ref')]
        ]

        await message.edit_text(
            text=msg,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_referral_stats: {e}")
        await message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='ref')]]
            )
        )


async def show_referral_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        message = update.message or update.callback_query.message

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        bot_username = (await context.bot.get_me()).username
        ref_link = f"https://t.me/{bot_username}?start=ref{user.id}"

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            referral_sheet = client.open("Bot").worksheet("Referrals")
            all_refs = referral_sheet.get_all_records()
            total_refs = len([r for r in all_refs if str(r['referrer_id']) == str(user.id)])
        except:
            total_refs = 0

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = (
            "üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*\n\n"
            f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n`{ref_link}`\n\n"
            "üí∏ *–ë–æ–Ω—É—Å—ã:*\n"
            "‚Ä¢ 1 —É—Ä–æ–≤–µ–Ω—å: 5%\n"
            "‚Ä¢ 2 —É—Ä–æ–≤–µ–Ω—å: 2%\n"
            "‚Ä¢ 3 —É—Ä–æ–≤–µ–Ω—å: 1%\n\n"
            f"üìä –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: *{total_refs}*"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
                                  url=f"https://t.me/share/url?url={ref_link}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è%20–∫%20–∫—Ä–∏–ø—Ç–æ–ø—Ä–æ–µ–∫—Ç—É!")],
            [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='ref_stats')],
            [InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='home')]
        ]

        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=msg,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                text=msg,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_referral_info: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='home')]]
            )
        )


async def get_basic_ref_stats(user_id):
    try:
        referral_sheet = client.open("Bot").worksheet("Referrals")
        transactions_sheet = client.open("Bot").worksheet("Transactions")

        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        all_refs = referral_sheet.get_all_records()
        total_refs = len([r for r in all_refs if str(r['referrer_id']) == str(user_id)])

        # –°—á–∏—Ç–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
        all_trans = transactions_sheet.get_all_records()
        earned = sum(
            float(t['amount']) for t in all_trans
            if str(t['user_id']) == str(user_id)
            and '—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å' in t.get('status', '').lower()
        )

        return {
            'total': total_refs,
            'earned': round(earned, 2)
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {'total': 0, 'earned': 0}



async def ref_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    referral_sheet = client.open("Bot").worksheet("Referrals")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_referrals = referral_sheet.get_all_records()
    user_referrals = [r for r in all_referrals if str(r['referrer_id']) == str(user_id)]

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
    levels = {1: [], 2: [], 3: []}
    for ref in user_referrals:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        # ... –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è ...
        pass

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "üìä –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    for level, refs in levels.items():
        message += f"üîπ {level} —É—Ä–æ–≤–µ–Ω—å: {len(refs)} —á–µ–ª.\n"

    await update.message.reply_text(message)


async def process_referral_bonuses(context: ContextTypes.DEFAULT_TYPE, referred_user_id: int, amount: float,
                                   action_type: str):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        referral_sheet = client.open("Bot").worksheet("Referrals")
        bonus_sheet = client.open("Bot").worksheet("ReferralBonuses")
        transaction_sheet = client.open("Bot").worksheet("Transactions")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        all_referrals = referral_sheet.get_all_records()
        referred_user = next((r for r in all_referrals if str(r['user_id']) == str(referred_user_id)), None)
        referred_username = referred_user.get('username',
                                              f"id{referred_user_id}") if referred_user else f"id{referred_user_id}"

        # –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–ø–æ—á–∫—É —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
        referrers = []
        current_user = str(referred_user_id)

        for level in range(1, 4):
            referrer = next((r for r in all_referrals if str(r['user_id']) == current_user), None)
            if not referrer:
                break

            referrers.append((
                level,
                referrer['referrer_id'],
                referrer.get('username', f"id{referrer['referrer_id']}")
            ))
            current_user = str(referrer['referrer_id'])

        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã –∫–∞–∂–¥–æ–º—É —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        for level, referrer_id, referrer_username in referrers:
            percent = [0.05, 0.02, 0.01][level - 1]
            bonus = round(amount * percent, 2)

            if bonus <= 0:
                continue

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            new_balance = round(get_balance(referrer_id) + bonus, 2)

            # 1. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±–æ–Ω—É—Å –≤ —Ç–∞–±–ª–∏—Ü—É ReferralBonuses
            if not save_referral_bonus(bonus_sheet, {
                'user_id': referrer_id,
                'referrer_id': referred_user_id,
                'level': level,
                'amount': bonus,
                'action_type': action_type,
                'referred_username': referred_username
            }):
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –±–æ–Ω—É—Å –¥–ª—è {referrer_id}")
                continue

            # 2. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            if not append_transaction(transaction_sheet, {
                'user_id': referrer_id,
                'balance': new_balance,
                'currency': 'STB',
                'amount': bonus,
                'status': f'–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å {level} —É—Ä–æ–≤–Ω—è',
                'Address/Photo': f'–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {referred_username}',
                'username': referrer_username,
                'tx_type': f'{action_type}_referral'
            }):
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è {referrer_id}")
                continue

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            try:
                await context.bot.send_message(
                    chat_id=referrer_id,
                    text=f"üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å {level} —É—Ä–æ–≤–Ω—è!\n"
                         f"‚Ä¢ –°—É–º–º–∞: {bonus} STB\n"
                         f"‚Ä¢ –¢–∏–ø: {action_type}\n"
                         f"‚Ä¢ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{referred_username}"
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_referral_bonuses: {e}")

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    keyboard = [
        [InlineKeyboardButton("üì• –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data='admin_requests')],
        [InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data='admin_users')],
        [InlineKeyboardButton("üè† –ù–∞–∑–∞–¥", callback_data='home')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)


import asyncio
import pytz

async def daily_staking_task():
    while True:
        now = datetime.now(pytz.timezone("Europe/Kyiv"))
        next_run = now.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
        await asyncio.sleep((next_run - now).total_seconds())

        records = staking_sheet.get_all_records()
        for i, row in enumerate(records, start=2):
            if row.get("status") != "–ê–∫—Ç–∏–≤–µ–Ω":
                continue

            end_date = datetime.strptime(row["end_date"], "%Y-%m-%d")
            if datetime.now() >= end_date:
                staking_sheet.update_cell(i, 8, "–ó–∞–≤–µ—Ä—à–µ–Ω")
                profit = float(row["earned"])
                user_id = row["user_id"]
                username = row.get("username", "")
                sheet.append_row([user_id, round(get_balance(user_id) + profit, 2), "STB", round(profit, 2), datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞","",username])
                continue

                earned = float(row.get("earned", 0)) + float(row.get("daily_profit", 0))
                staking_sheet.update_cell(i, 9, round(earned, 2))
                # –í–ª–æ–∂–∏—Ç–µ —ç—Ç–æ –≤ —Ü–∏–∫–ª, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–µ–π–∫–∏:
                # –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è earned
                new_balance = get_balance(user_id) + daily_profit

            user_row_num = next((idx + 1 for idx,rec in enumerate(sheet.get_all_records()) if rec['user_id'] == user_id), None)

            if user_row_num:
                sheet.update_cell(user_row_num, 3, new_balance)
    # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ Google Sheets

            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await context.bot.send_message(chat_id=user_id, text=f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {daily_profit} STB –∑–∞ —Å—Ç–µ–π–∫–∏–Ω–≥.")
        except:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
load_dotenv()

# –í–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def post_init(application: Application):
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

async def post_shutdown(application: Application):
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –ø–µ—Ä–µ–¥ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º –±–æ—Ç–∞"""
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """üìö Support:–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É —Ç–µ—Ö. –ê–¥–º–∏–Ω—É: @123 """
    await update.message.reply_text(help_text)

async def post_init(application):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é"""
    commands = [
        BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("help", "–ü–æ–º–æ—â—å")
    ]
    await application.bot.set_my_commands(commands)

async def refresh_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ (/setcommands)"""
    await set_commands(context.bot)
    await update.message.reply_text("‚úÖ –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

async def set_commands(bot):
    await bot.set_my_commands([
        BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"),
        BotCommand("setcommands", "–û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ (–∞–¥–º–∏–Ω)")
    ])

def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        app = ApplicationBuilder() \
            .token("7675737327:AAHdhojQrVLlpgwRCanmcBwRduimo7pBBsY") \
            .post_init(post_init) \
            .post_shutdown(post_shutdown) \
            .build()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JobQueue –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
        jq = app.job_queue

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–µ–π–∫–∏–Ω–≥–æ–≤
        if jq:
            jq.run_daily(
                callback=process_stakes,
                time=time(hour=00, minute=50, tzinfo=pytz.timezone("Europe/Kyiv")),
                name="daily_staking_processing"
            )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("start", start),
                CallbackQueryHandler(handle_buttons),
                MessageHandler(filters.TEXT & ~filters.COMMAND, input_amount)
            ],
            states={
                INPUT_AMOUNT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, input_amount),
                    CallbackQueryHandler(handle_buttons)
                ],
                WAITING_PHOTO: [
                    MessageHandler(filters.PHOTO, receive_photo)
                ],
            },
            fallbacks=[
                CommandHandler("cancel", cancel),
                CommandHandler("start", start)
            ],
            allow_reentry=True
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        app.post_init(set_commands)
        app.add_handler(conv_handler)
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("setcommands", refresh_commands))
        app.add_handler(CommandHandler("admin", admin_panel))
        app.add_handler(CallbackQueryHandler(handle_buttons))
        app.add_handler(CallbackQueryHandler(
            handle_admin_buttons,
            pattern=r"^(approve|reject)_\d+$"
        ))
        app.add_handler(CommandHandler("help", help_command))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        app.add_error_handler(error_handler)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logging.info("Starting bot...")
        app.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES,
            close_loop=False
        )

    except Exception as e:
        logging.critical(f"Bot crashed: {e}", exc_info=True)
        raise


async def post_init(app: Application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    logging.info("Bot initialized successfully")


async def post_shutdown(app: Application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º –±–æ—Ç–∞"""
    logging.info("Bot shutdown completed")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logging.error("Exception while handling update:", exc_info=context.error)

    if update and isinstance(update, Update):
        if update.callback_query:
            await update.callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=False)
        elif update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.FileHandler("bot.log"),
            logging.StreamHandler()
        ]
    )

    try:
        # –î–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å—Ä–µ–¥–∞—Ö
        import nest_asyncio

        nest_asyncio.apply()

        main()
    except Exception as e:
        logging.critical(f"Failed to start bot: {e}", exc_info=True)

















